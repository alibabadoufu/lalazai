[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "recommendation-system"
version = "2.0.0"
description = "Intelligent Research Recommendation Engine with LLM and versioned pipelines"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "Your Team", email = "team@company.com"}
]
keywords = ["llm", "recommendation", "rag", "ai", "ml", "pipeline", "versioning"]

classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "openai>=1.0.0",
    "pandas>=1.5.0",
    "numpy>=1.20.0",
    "pydantic>=2.0.0",
    "python-dotenv>=0.19.0",
    "pyyaml>=6.0",
    "httpx>=0.24.0",
    "tenacity>=8.0.0",
    "scikit-learn>=1.0.0",
    "faiss-cpu>=1.7.0",
    "sentence-transformers>=2.2.0",
    "langchain>=0.1.0",
    "chromadb>=0.4.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=5.0.0",
    "mypy>=1.0.0",
    "pre-commit>=2.20.0",
]

monitoring = [
    "prometheus-client>=0.15.0",
    "grafana-client>=3.0.0",
    "streamlit>=1.20.0",
    "plotly>=5.0.0",
    "dash>=2.0.0",
]

orchestration = [
    "apache-airflow>=2.5.0",
    "prefect>=2.0.0",
    "celery>=5.2.0",
    "redis>=4.0.0",
]

cloud = [
    "boto3>=1.26.0",
    "azure-storage-blob>=12.0.0",
    "google-cloud-storage>=2.0.0",
    "pinecone-client>=2.0.0",
    "weaviate-client>=3.0.0",
]

api = [
    "fastapi>=0.100.0",
    "uvicorn>=0.20.0",
    "pydantic-settings>=2.0.0",
    "python-multipart>=0.0.5",
]

all = [
    "recommendation-system[dev,monitoring,orchestration,cloud,api]"
]

[project.urls]
Homepage = "https://github.com/yourorg/recommendation-system"
Documentation = "https://docs.yourorg.com/recommendation-system"
Repository = "https://github.com/yourorg/recommendation-system"
Issues = "https://github.com/yourorg/recommendation-system/issues"
Changelog = "https://github.com/yourorg/recommendation-system/blob/main/CHANGELOG.md"

[project.scripts]
recsys = "scripts.utilities.cli:main"
recsys-pipeline = "pipelines.factory:cli_main"
recsys-eval = "evaluation.framework.offline_evaluator:cli_main"

[tool.setuptools.packages.find]
include = ["recommendation_system*", "pipelines*", "llm*", "data*", "evaluation*", "configs*"]

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json", "*.txt", "*.md"]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["recommendation_system", "pipelines", "llm", "data", "evaluation"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--cov=recommendation_system",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
]

[tool.coverage.run]
source = ["recommendation_system", "pipelines", "llm", "data", "evaluation"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 